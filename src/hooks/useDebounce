// import { useState, useEffect } from 'react';

// // Custom hook for debouncing values
// export function useDebounce<T>(value: T, delay: number = 500): T {
//   const [debouncedValue, setDebouncedValue] = useState<T>(value);

//   useEffect(() => {
//     // Set a timeout to update the debounced value after the specified delay
//     const timer = setTimeout(() => {
//       setDebouncedValue(value);
//     }, delay);

//     // Clean up the timeout if the value changes again before the delay has passed
//     return () => {
//       clearTimeout(timer);
//     };
//   }, [value, delay]);

//   return debouncedValue;
// }

// export default useDebounce;



//javascript version


import { useState, useEffect } from 'react';

// Custom hook for debouncing values
export function useDebounce(value, delay = 500) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);

  return debouncedValue;
}

export default useDebounce;
